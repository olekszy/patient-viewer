max_interval <- mean_data[max_pos, 1]
NA_count <- sum(is.na(activity$steps))
na_pos <- which(is.na(activity$steps))
# Create a vector of means
mean_vec <- rep(mean(activity$steps, na.rm=TRUE), times=length(na_pos))
# Replace the NAs by the means
activity[na_pos, "steps"] <- mean_vec
# Clear the workspace
rm(mean_vec, na_pos)
sum_data <- aggregate(activity$steps, by=list(activity$date), FUN=sum)
# Rename the attributes
names(sum_data) <- c("date", "total")
# Compute the histogram of the total number of steps each day
hist(sum_data$total,
breaks=seq(from=0, to=25000, by=2500),
col="blue",
xlab="Total number of steps",
ylim=c(0, 30),
main="Histogram of the total number of steps taken each day\n(NA replaced by mean value)")
# Clear the workspace
rm(sum_data)
# Load the lattice graphical library
library(lattice)
# Compute the average number of steps taken, averaged across all daytype variable
mean_data <- aggregate(activity$steps,
by=list(activity$daytype,
activity$weekday, activity$interval), mean)
# Rename the attributes
names(mean_data) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, mean_data,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
plot
plot(mean_data$interval,
mean_data$mean,
type="l",
col="blue",
lwd=2,
xlab="Interval [minutes]",
ylab="Average number of steps",
main="Time-series of the average number of steps per intervals\n(NA removed)")
library(lattice)
activities <- read.csv("activity.csv", stringsAsFactors=FALSE) # Read df from csv
activities$date <- as.POSIXct(activities$date, format="%Y-%m-%d") #import date as date format
activities <- data.frame(date=activities$date,
weekday=tolower(weekdays(activities$date)),
steps=activities$steps,
interval=activities$interval) # check weekdays
activities <- cbind(activities,
daytype=ifelse(activities$weekday == "sobota" |
activities$weekday == "niedziela", "weekend",
"weekday")) # separate weekdays from weekends
activity <- data.frame(date=activities$date,
weekday=activities$weekday,
daytype=activities$daytype,
interval=activities$interval,
steps=activities$steps) # dataframe creation
assumeddata <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE) # local values without DF
names(assumeddata) <- c("date", "total") # new column names
#Creation of histogram of total number of steps peer day
hist(assumeddata$total,
breaks=seq(from=0, to=25000, by=2500),
col="purple",
xlab="Total_steps",
ylim=c(0, 20),
main="Total number of steps witout NAs")
means <- aggregate(activity$steps,
by=list(activity$interval),
FUN=mean,
na.rm=TRUE) # count means
names(means) <- c("interval", "mean") # renaming
#create plot for time series
plot(means$interval,
means$mean,
type="l",
col="purple",
lwd=2,
xlab="Time in minutes",
ylab="Average steps",
main="Times without NAs)")
#####################
max_pos <- which(means$mean == max(means$mean)) #count maximum mean
max_interval <- means[max_pos, 1]
NAs <- sum(is.na(activity$steps)) #Count sum of NAs
NAs_positions <- which(is.na(activity$steps)) #find where nas are
mean_vec <- rep(mean(activity$steps, na.rm=TRUE), times=length(NAs_positions)) # means to vetor
activity[NAs_positions, "steps"] <- mean_vec
assumeddata <- aggregate(activity$steps, by=list(activity$date), FUN=sum)
names(assumeddata) <- c("date", "total") # new attributes
#histogram of total steps, but NAs repleaced
hist(assumeddata$total,
breaks=seq(from=0, to=25000, by=2500),
col="purple",
xlab="Total steps",
ylim=c(0, 30),
main="Total steps, but NAs repleaced with mean value")
means <- aggregate(activity$steps,
by=list(activity$daytype,
activity$weekday, activity$interval), mean) #mean values
names(means) <- c("daytype", "weekday", "interval", "mean") # rename columns
#plotting
xyplot(mean ~ interval | daytype, means,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
#plotting
xyplot(mean ~ interval | daytype, means,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
library(lattice)
activities <- read.csv("activity.csv", stringsAsFactors=FALSE) # Read df from csv
activities$date <- as.POSIXct(activities$date, format="%Y-%m-%d") #import date as date format
activities <- data.frame(date=activities$date,
weekday=tolower(weekdays(activities$date)),
steps=activities$steps,
interval=activities$interval) # check weekdays
activities <- cbind(activities,
daytype=ifelse(activities$weekday == "sobota" |
activities$weekday == "niedziela", "weekend",
"weekday")) # separate weekdays from weekends
activity <- data.frame(date=activities$date,
weekday=activities$weekday,
daytype=activities$daytype,
interval=activities$interval,
steps=activities$steps) # dataframe creation
assumeddata <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE) # local values without DF
names(assumeddata) <- c("date", "total") # new column names
assumeddata <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE) # local values without DF
names(assumeddata) <- c("date", "total") # new column names
## What is mean total number of steps taken per day?
```{r}
hist(assumeddata$total,
breaks=seq(from=0, to=25000, by=2500),
col="purple",
xlab="Total_steps",
ylim=c(0, 20),
main="Total number of steps witout NAs")
hist(assumeddata$total,
breaks=seq(from=0, to=25000, by=2500),
col="purple",
xlab="Total_steps",
ylim=c(0, 20),
main="Total number of steps witout NAs")
## What is the average daily activity pattern?
```{r}
means <- aggregate(activity$steps,
by=list(activity$interval),
FUN=mean,
na.rm=TRUE) # count means
names(means) <- c("interval", "mean") # renaming
#create plot for time series
```{r}
plot(means$interval,
means$mean,
type="l",
col="purple",
lwd=2,
xlab="Time in minutes",
ylab="Average steps",
main="Times without NAs)")
## Imputing missing values
```{r}
max_pos <- which(means$mean == max(means$mean)) #count maximum mean
max_interval <- means[max_pos, 1]
NAs <- sum(is.na(activity$steps)) #Count sum of NAs
NAs_positions <- which(is.na(activity$steps)) #find where nas are
mean_vec <- rep(mean(activity$steps, na.rm=TRUE), times=length(NAs_positions)) # means to vetor
activity[NAs_positions, "steps"] <- mean_vec
assumeddata <- aggregate(activity$steps, by=list(activity$date), FUN=sum)
names(assumeddata) <- c("date", "total") # new attributes
## Are there differences in activity patterns between weekdays and weekends?
```{r}
#histogram of total steps, but NAs repleaced
hist(assumeddata$total,
breaks=seq(from=0, to=25000, by=2500),
col="purple",
xlab="Total steps",
ylim=c(0, 30),
main="Total steps, but NAs repleaced with mean value")
means <- aggregate(activity$steps,
by=list(activity$daytype,
activity$weekday, activity$interval), mean) #mean values
names(means) <- c("daytype", "weekday", "interval", "mean") # rename columns
#plotting
xyplot(mean ~ interval | daytype, means,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
means <- aggregate(activity$steps,
by=list(activity$daytype,
activity$weekday, activity$interval), mean) #mean values
names(means) <- c("daytype", "weekday", "interval", "mean") # rename columns
#plotting
xyplot(mean ~ interval | daytype, means,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
install.packages("rmarkdown")
setwd("~/GitHub/Reproducible-research/Second Assignment")
#Plot
---
title: "Exploring the U.S. National Oceanic and Atmospheric Administration's (NOAA) storm database"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## Data processing
```{r}
library(ggplot2)
fileUrl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destfile <- "./repdata-data-StormData.csv.bz2"
if (!file.exists(destfile)) {
download.file(fileUrl, destfile = destfile, quiet=TRUE)
dateDownloaded <- date()
}
rawinput <- read.csv(bzfile(destfile), stringsAsFactors=FALSE)
rawinput$TOTAL_CAS <- rawinput$FATALITIES + rawinput$INJURIES
value <- function(x) {
x <- tolower(x)
if (x == "k") res <- 1000
if (x == "m") res <- 1e+06
if (x == "b") res <- 1e+09
else res <- 1
res
}
rawinput$TOTAL_CAS <- rawinput$FATALITIES + rawinput$INJURIES
rawinput$TOTAL_DMG <- rawinput$PROP_DMG + rawinput$CROP_DMG
rawinput$PROP_DMG <- rawinput$PROPDMG * sapply(rawinput$PROPDMGEXP, value) /1000000
## Results
#Q1
```{r}
update(proc_data, 2,3)
update(proc_data, 3,3)
#Plot for Q1
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
#Q2
```{r}
update(proc_data, 5,3)
update(proc_data, 6,3)
dmg_data <- update(proc_data, 7,10)
print(dmg_data)
```
#Plot for Q2
```{r}
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
```
#Plot for Q2
```{r}
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
```
update(proc_data, 3,3)
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
rawinput$PROP_DMG <- rawinput$PROPDMG * sapply(rawinput$PROPDMGEXP, value) /1000000
rawinput$PROP_DMG <- rawinput$PROPDMG * sapply(rawinput$PROPDMGEXP, value) /1000000
rawinput$CROP_DMG <- rawinput$CROPDMG * sapply(rawinput$CROPDMGEXP, value) /1000000
rawinput$CROP_DMG <- rawinput$CROPDMG * sapply(rawinput$CROPDMGEXP, value) /1000000
rawinput$TOTAL_DMG <- rawinput$PROP_DMG + rawinput$CROP_DMG
```{r}
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
colnames(proc_data) <- c("EVTYPE", colnames(proc_data[2:7]))
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
## Results
#Q1
```{r}
update(proc_data, 2,3)
update(proc_data, 3,3)
cas <- update(proc_data, 4,10)
print(cas)
update(proc_data, 3,3)
#Plot for Q1
```{r}
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
#Q2
```{r}
update(proc_data, 5,3)
update(proc_data, 6,3)
dmg_data <- update(proc_data, 7,10)
print(dmg_data)
```
#Plot for Q2
```{r}
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
```
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
colnames(proc_data) <- c("EVTYPE", colnames(proc_data[2:7]))
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
colnames(proc_data) <- c("EVTYPE", colnames(proc_data[2:7]))
## Results
#Q1
```{r}
update(proc_data, 2,3)
update(proc_data, 2,3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
fileUrl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destfile <- "./repdata-data-StormData.csv.bz2"
if (!file.exists(destfile)) {
download.file(fileUrl, destfile = destfile, quiet=TRUE)
dateDownloaded <- date()
}
rawinput <- read.csv(bzfile(destfile), stringsAsFactors=FALSE)
rawinput$TOTAL_CAS <- rawinput$FATALITIES + rawinput$INJURIES
value <- function(x) {
x <- tolower(x)
if (x == "k") res <- 1000
if (x == "m") res <- 1e+06
if (x == "b") res <- 1e+09
else res <- 1
res
}
rawinput$PROP_DMG <- rawinput$PROPDMG * sapply(rawinput$PROPDMGEXP, value) /1000000
rawinput$CROP_DMG <- rawinput$CROPDMG * sapply(rawinput$CROPDMGEXP, value) /1000000
rawinput$TOTAL_DMG <- rawinput$PROP_DMG + rawinput$CROP_DMG
proc_data <- rawinput[,c("EVTYPE", "FATALITIES", "INJURIES", "TOTAL_CAS", "PROP_DMG", "CROP_DMG", "TOTAL_DMG")]
proc_data <- aggregate(proc_data[,2:7], by=list(proc_data$EVTYPE),FUN=sum, na.rm=TRUE)
colnames(proc_data) <- c("EVTYPE", colnames(proc_data[2:7]))
up_date(proc_data, 2,3)
up_date <- function(df, col, top) {
df <- df[,c(1, col)]
df <- df[order(df[,2], decreasing = T),]
df <- df[1:top,]
rownames(df) <- NULL
df
}
up_date(proc_data, 2,3)
up_date(proc_data, 3,3)
cas <- up_date(proc_data, 4,10)
print(cas)
up_date(proc_data, 2,3)
up_date(proc_data, 3,3)
cas <- up_date(proc_data, 4,10)
print(cas)
#Plot for Q1
```{r}
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
ggplot(cas, aes(x=EVTYPE, y=TOTAL_CAS, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 casualties due to severe weather events in US") +
xlab("Events") +
ylab("Total casualties") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
#Q2
```{r}
up_date(proc_data, 5,3)
up_date(proc_data, 6,3)
dmg_data <- up_date(proc_data, 7,10)
print(dmg_data)
```
#Plot for Q2
```{r}
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
```
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
up_date(proc_data, 5,3)
up_date(proc_data, 6,3)
dmg_data <- up_date(proc_data, 7,10)
print(dmg_data)
up_date(proc_data, 5,3)
up_date(proc_data, 6,3)
dmg_data <- up_date(proc_data, 7,10)
print(dmg_data)
#Plot for Q2
```{r}
ggplot(dmg_data, aes(x=EVTYPE, y=TOTAL_DMG, fill=EVTYPE)) +
geom_bar(stat="identity") +
ggtitle("Top 10 weather economic consequences events in US") +
xlab("Events") +
ylab("Total damage in millions USD") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
```
library(shiny); runApp('C:/Users/szymc/Desktop/eRka/ELISA online.R')
runApp('C:/Users/szymc/Desktop/eRka/ELISA online.R')
runApp('C:/Users/szymc/Desktop/eRka/ELISA online.R')
runApp('C:/Users/szymc/Desktop/eRka/ELISA online.R')
runApp('C:/Users/szymc/Desktop/eRka/ELISA online.R')
setwd("C:/Users/szymc/Desktop/eRka")
library(shiny)
library(markdown)
library(reticulate)
ui <- navbarPage("Database Patients Viewer",
tabPanel("Import Data",
sidebarLayout(
sidebarPanel(
helpText("Import CSV files needed to analyse"),
fileInput("csv", h3("Input Database to analyse")),
fileInput("template", label = h3("Insert plate template")
)),
mainPanel(
textOutput("selected_csv"),
textOutput("selected_template")
)
)
),
tabPanel("Patient View"),
tabPanel("Statistics")
)
# Define server logic ----
server <- function(input, output) {
output$selected_csv <- renderText({paste("Elisa reads: ", input$csv[1])})
output$selected_template <- renderText({paste("Template: ", input$template[1])})
}
setwd("C:/Users/szymc/Desktop/eRka")
library(shiny)
library(markdown)
library(reticulate)
ui <- navbarPage("Database Patients Viewer",
tabPanel("Import Data",
sidebarLayout(
sidebarPanel(
helpText("Import CSV files needed to analyse"),
fileInput("csv", h3("Input Database to analyse")),
fileInput("template", label = h3("Insert plate template")
)),
mainPanel(
textOutput("selected_csv"),
textOutput("selected_template")
)
)
),
tabPanel("Patient View"),
tabPanel("Statistics")
)
# Define server logic ----
server <- function(input, output) {
output$selected_csv <- renderText({paste("Elisa reads: ", input$csv[1])})
output$selected_template <- renderText({paste("Template: ", input$template[1])})
}
runApp('ELISA online.R')
runApp('ELISA online.R')
runApp('ELISA online.R')
runApp('ELISA online.R')
runApp('ELISA online.R')
runApp('ELISA online.R')
runApp('ELISA online.R')
